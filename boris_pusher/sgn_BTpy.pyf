!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module BTpy ! in 
    interface  ! in :BTpy
        module orbit_parameters_mod ! in :BTpy:../include/orbit_parameters_mod.f90
            integer(kind=4), parameter,optional :: nfcoil=18
            integer(kind=4), parameter,optional :: nsilop=41
            integer(kind=4), parameter,optional :: nrogow=1
            integer(kind=4), parameter,optional :: ntime=1
            integer(kind=4), parameter,optional :: nacoil=1
            integer(kind=4), parameter,optional :: nesum=6
            integer(kind=4), parameter,optional :: magpri67=29
            integer(kind=4), parameter,optional :: magpri322=31
            integer(kind=4), parameter,optional :: magprit=6
            integer(kind=4), parameter,optional,depend(magpri67,magpri322) :: magpri=60
            integer(kind=4), parameter,optional :: necoil=122
            integer(kind=4), parameter,optional :: mpress=132
            integer(kind=4), parameter,optional :: nvesel=24
            integer(kind=4), parameter,optional :: ndata=41
            integer(kind=4), parameter,optional :: nwwcur=18
            integer(kind=4), parameter,optional :: nstark=16
            integer(kind=4), parameter,optional :: nffcur=18
            integer(kind=4), parameter,optional :: nppcur=18
            integer(kind=4), parameter,optional,depend(nffcur,nppcur) :: npcurn=36
            integer(kind=4), parameter,optional,depend(nfcoil,nesum,nvesel,nwwcur,npcurn,nffcur,nppcur) :: mfnpcr=120
            integer(kind=4), parameter,optional,depend(npcurn,nffcur,nppcur) :: npcur2=72
            integer(kind=4), parameter,optional,depend(nfcoil,nsilop,nrogow,magpri,mpress,nwwcur,nstark,nffcur,npcurn,magpri67,magpri322,nppcur) :: nrsmat=341
            integer(kind=4), parameter,optional,depend(nwwcur,npcurn,nffcur,nppcur) :: nwcurn=54
            integer(kind=4), parameter,optional,depend(npcurn,nffcur,nppcur) :: npcur3=72
            integer(kind=4), parameter,optional,depend(nwcurn,nwwcur,npcurn,nffcur,nppcur) :: nwcur2=108
            integer(kind=4), parameter,optional :: npoint=800
            integer(kind=4), parameter,optional :: nw=300
            integer(kind=4), parameter,optional :: nh=300
            integer(kind=4), parameter,optional,depend(nw,nh) :: nwnh=90000
            integer(kind=4), parameter,optional,depend(nh) :: nh2=600
            integer(kind=4), parameter,optional,depend(nw,nh) :: nwrk=180600
            integer(kind=4), parameter,optional,depend(nfcoil,nesum,nvesel) :: ncurrt=48
            integer(kind=4), parameter,optional :: mbdry=1500
            integer(kind=4), parameter,optional,depend(nsilop) :: nbwork=41
            integer(kind=4), parameter,optional :: kxiter=250
            integer(kind=4), parameter,optional :: mqwant=30
            integer(kind=4), parameter,optional :: nlimit=150
            integer(kind=4), parameter,optional :: nlimbd=6
            integer(kind=4), parameter,optional,depend(nfcoil,nsilop,mbdry) :: msbdry=1560
            integer(kind=4), parameter,optional,depend(msbdry,nfcoil,nsilop,mbdry) :: msbdr2=3120
            integer(kind=4), parameter,optional,depend(nrsmat,nfcoil,nsilop,nrogow,magpri,mpress,nwwcur,nstark,nffcur,npcurn,magpri67,magpri322,nppcur) :: nrsma2=682
            integer(kind=4), parameter,optional,depend(nw) :: nwwf=600
            integer(kind=4), parameter,optional,depend(nwwf,nw) :: nwf=600
            integer(kind=4), parameter,optional :: nxtram=10
            integer(kind=4), parameter,optional,depend(npoint) :: nxtrap=800
            integer(kind=4), parameter,optional :: nxtlim=9
            integer(kind=4), parameter,optional :: nco2v=3
            integer(kind=4), parameter,optional :: nco2r=1
            integer(kind=4), parameter,optional :: nangle=64
            integer(kind=4), parameter,optional :: nfbcoil=12
            integer(kind=4), parameter,optional :: kubicx=4
            integer(kind=4), parameter,optional :: kubicy=4
            integer(kind=4), parameter,optional,depend(nw,kubicx) :: lubicx=297
            integer(kind=4), parameter,optional,depend(nh,kubicy) :: lubicy=297
            integer(kind=4), parameter,optional,depend(kubicx,kubicy,lubicx,lubicy,nw,nh) :: kujunk=1411344
            integer(kind=4), parameter,optional :: modef=4
            integer(kind=4), parameter,optional :: modep=4
            integer(kind=4), parameter,optional :: modew=4
            integer(kind=4), parameter,optional :: kubics=4
            integer(kind=4), parameter,optional :: nrsp=200
            integer(kind=4), parameter,optional,depend(kubicx,lubicx,nw) :: nxknot=304
            integer(kind=4), parameter,optional,depend(kubicy,lubicy,nh) :: nyknot=304
            integer(kind=4), parameter,optional :: n_par=20
            integer(kind=4), parameter,optional :: n111=1
            integer(kind=4), parameter,optional :: n333=3
            integer(kind=4), parameter,optional :: neqdsk=38
            real(kind=8), parameter,optional :: pi=3.1415926535897932d0
            real(kind=8), parameter,optional,depend(pi) :: twopi=6.283185307179586
            real(kind=8), parameter,optional :: tmu=2e-07
            real(kind=8) :: xxxxxx
        end module orbit_parameters_mod
        module flux_par_mod ! in :BTpy:../flux/flux_par_mod.f90
            use orbit_parameters_mod
            real(kind=8) dimension(300) :: rgrid
            real(kind=8) dimension(300) :: zgrid
            integer(kind=4) :: mw
            integer(kind=4) :: mh
            real(kind=8) dimension(90000) :: psi
            real(kind=8) dimension(90000) :: xpsi
            real(kind=8) :: psibry
            real(kind=8) :: simag
            real(kind=8) :: sidif
            real(kind=8) :: eouter
            real(kind=8) dimension(300) :: qpsi
            real(kind=8) dimension(300) :: bfpol
            real(kind=8) dimension(300) :: cfpol
            real(kind=8) dimension(300) :: dfpol
            integer(kind=4) :: mwfpol
            real(kind=8) dimension(1500) :: rbdry
            real(kind=8) dimension(1500) :: zbdry
            integer(kind=4) :: nbdry
            real(kind=8) dimension(300) :: xxxsi
            real(kind=8) dimension(90000) :: pcurrt
            real(kind=8) :: sifm
            real(kind=8) :: sifb
            real(kind=8) :: rzero
            real(kind=8) :: bzero
            real(kind=8) :: current
            real(kind=8) :: rmaxis
            real(kind=8) :: zmaxis
            real(kind=8) :: rlmin
            real(kind=8) :: rlmax
            real(kind=8) :: zlmin
            real(kind=8) :: zlmax
            integer(kind=4) :: limitr
            real(kind=8) dimension(150) :: rlim
            real(kind=8) dimension(150) :: zlim
            real(kind=8) dimension(4,297,4,297) :: c
            real(kind=8) dimension(180600) :: wk
            real(kind=8) dimension(298) :: bkx
            real(kind=8) dimension(298) :: bky
            integer(kind=4) :: lkx
            integer(kind=4) :: lky
            real(kind=8) dimension(300) :: volp
            real(kind=8) dimension(300) :: pprime
            real(kind=8) dimension(300) :: pres
            real(kind=8) dimension(300) :: ffprim
            real(kind=8) dimension(300) :: fpol
        end module flux_par_mod
        module boris_mod ! in :BTpy:boris_mod.f90
            real(kind=8), parameter,optional :: me=9.10938356e-31
            real(kind=8), parameter,optional :: mp=1.6726219e-27
            real(kind=8), parameter,optional :: mn=1.674927471e-27
            real(kind=8), parameter,optional :: md=3.343583772e-27
            real(kind=8), parameter,optional :: mamu=1.66053892173e-27
            real(kind=8), parameter,optional :: ec=1.60217662e-19
            real(kind=8), parameter,optional,depend(me,ec) :: em_ratio=175882002272.39087
            real(kind=8), parameter,optional :: pi=3.141592653589793
            real(kind=8), parameter,optional,depend(pi) :: dtr=0.017453292519943295
            real(kind=8), parameter,optional,depend(ec) :: mev=1.60217662e-13
            real(kind=8), optional :: q=1.0
            real(kind=8), optional :: m=1836.152
            real(kind=8) :: q_over_m
            logical, optional :: initialized=.false.
            function cross_product(a,b) result (cp) ! in :BTpy:boris_mod.f90:boris_mod
                real(kind=8) dimension(3),intent(in) :: a
                real(kind=8) dimension(3),intent(in) :: b
                real(kind=8) dimension(3) :: cp
            end function cross_product
            function vect_mag(v) result (v_mag) ! in :BTpy:boris_mod.f90:boris_mod
                real*8 dimension(:),intent(in) :: v
                real*8 :: v_mag
            end function vect_mag
            subroutine boris_init(qv,mv) ! in :BTpy:boris_mod.f90:boris_mod
                real(kind=8) intent(in) :: qv
                real(kind=8) intent(in) :: mv
            end subroutine boris_init
            subroutine b_push(rs,vs,dt,nsteps,bfield,efield,track) ! in :BTpy:boris_mod.f90:boris_mod
                real(kind=8) dimension(3),intent(in) :: rs
                real(kind=8) dimension(3),intent(in) :: vs
                real(kind=8) :: dt
                integer(kind=4) :: nsteps
                external bfield
                external efield
                real(kind=8) dimension(nsteps,6),intent(out),depend(nsteps) :: track
                interface  ! in :BTpy:boris_mod.f90:boris_mod:b_push
                    function bfield(x) result (bf) ! in :BTpy:boris_mod.f90:boris_mod:b_push:unknown_interface
                        real(kind=8) dimension(3),intent(in) :: x
                        real(kind=8) dimension(3) :: bf
                    end function bfield
                    function efield(x) result (ef) ! in :BTpy:boris_mod.f90:boris_mod:b_push:unknown_interface
                        real(kind=8) dimension(3),intent(in) :: x
                        real(kind=8) dimension(3) :: ef
                    end function efield
                end interface 
            end subroutine b_push
        end module boris_mod
        module tracker ! in :BTpy:BT.f90
            use boris_mod
            real(kind=8), optional :: particle_charge=1.0
            real(kind=8), optional :: particle_mass_amu=1.0072765402315362
            real(kind=8), optional :: particle_energy_mev=3.0
            real(kind=8), optional :: particle_mass=1.6726219e-27
            real(kind=8), optional :: particle_energy=4.80652986e-13
            real(kind=8) :: particle_mass_me
            real(kind=8) :: vmag
            character(len=132), optional :: efit_gfile_name=''
            character(len=132), optional :: efit_directory=''
            logical, optional :: time_reversed=.true.
            logical, optional :: flux_ok=.false.
            real(kind=8), optional :: track_length=10.0
            real(kind=8), optional :: step_size=0.01
            real(kind=8), optional :: time_step=0.001
            integer(kind=4) :: nsteps
            real(kind=8), allocatable,dimension(:,:) :: trajectory
            subroutine load_flux ! in :BTpy:BT.f90:tracker
            end subroutine load_flux
            subroutine set_gfile_name(gfile_name) ! in :BTpy:BT.f90:tracker
                character*132 intent(in) :: gfile_name
            end subroutine set_gfile_name
            subroutine set_directory(directory) ! in :BTpy:BT.f90:tracker
                character*132 intent(in) :: directory
            end subroutine set_directory
            subroutine init_bt ! in :BTpy:BT.f90:tracker
            end subroutine init_bt
            subroutine reset_bt ! in :BTpy:BT.f90:tracker
            end subroutine reset_bt
            function get_trajectory(r0,v0) result (ier) ! in :BTpy:BT.f90:tracker
                real(kind=8) dimension(3) :: r0
                real(kind=8) dimension(3) :: v0
                integer(kind=4) :: ier
            end function get_trajectory
            function bfield3(r) result (b) ! in :BTpy:BT.f90:tracker
                use boris_mod
                real(kind=8) dimension(3),intent(in) :: r
                real(kind=8) dimension(3) :: b
            end function bfield3
            function efield(r) result (e) ! in :BTpy:BT.f90:tracker
                real(kind=8) dimension(3),intent(in) :: r
                real(kind=8) dimension(3) :: e
            end function efield
        end module tracker
    end interface 
end python module BTpy

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
